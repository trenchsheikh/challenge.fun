/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/color-convert";
exports.ids = ["vendor-chunks/color-convert"];
exports.modules = {

/***/ "(ssr)/./node_modules/color-convert/conversions.js":
/*!***************************************************!*\
  !*** ./node_modules/color-convert/conversions.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* MIT license */ /* eslint-disable no-mixed-operators */ const cssKeywords = __webpack_require__(/*! color-name */ \"(ssr)/./node_modules/color-name/index.js\");\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\nconst reverseKeywords = {};\nfor (const key of Object.keys(cssKeywords)){\n    reverseKeywords[cssKeywords[key]] = key;\n}\nconst convert = {\n    rgb: {\n        channels: 3,\n        labels: \"rgb\"\n    },\n    hsl: {\n        channels: 3,\n        labels: \"hsl\"\n    },\n    hsv: {\n        channels: 3,\n        labels: \"hsv\"\n    },\n    hwb: {\n        channels: 3,\n        labels: \"hwb\"\n    },\n    cmyk: {\n        channels: 4,\n        labels: \"cmyk\"\n    },\n    xyz: {\n        channels: 3,\n        labels: \"xyz\"\n    },\n    lab: {\n        channels: 3,\n        labels: \"lab\"\n    },\n    lch: {\n        channels: 3,\n        labels: \"lch\"\n    },\n    hex: {\n        channels: 1,\n        labels: [\n            \"hex\"\n        ]\n    },\n    keyword: {\n        channels: 1,\n        labels: [\n            \"keyword\"\n        ]\n    },\n    ansi16: {\n        channels: 1,\n        labels: [\n            \"ansi16\"\n        ]\n    },\n    ansi256: {\n        channels: 1,\n        labels: [\n            \"ansi256\"\n        ]\n    },\n    hcg: {\n        channels: 3,\n        labels: [\n            \"h\",\n            \"c\",\n            \"g\"\n        ]\n    },\n    apple: {\n        channels: 3,\n        labels: [\n            \"r16\",\n            \"g16\",\n            \"b16\"\n        ]\n    },\n    gray: {\n        channels: 1,\n        labels: [\n            \"gray\"\n        ]\n    }\n};\nmodule.exports = convert;\n// Hide .channels and .labels properties\nfor (const model of Object.keys(convert)){\n    if (!(\"channels\" in convert[model])) {\n        throw new Error(\"missing channels property: \" + model);\n    }\n    if (!(\"labels\" in convert[model])) {\n        throw new Error(\"missing channel labels property: \" + model);\n    }\n    if (convert[model].labels.length !== convert[model].channels) {\n        throw new Error(\"channel and label counts mismatch: \" + model);\n    }\n    const { channels, labels } = convert[model];\n    delete convert[model].channels;\n    delete convert[model].labels;\n    Object.defineProperty(convert[model], \"channels\", {\n        value: channels\n    });\n    Object.defineProperty(convert[model], \"labels\", {\n        value: labels\n    });\n}\nconvert.rgb.hsl = function(rgb) {\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n    const delta = max - min;\n    let h;\n    let s;\n    if (max === min) {\n        h = 0;\n    } else if (r === max) {\n        h = (g - b) / delta;\n    } else if (g === max) {\n        h = 2 + (b - r) / delta;\n    } else if (b === max) {\n        h = 4 + (r - g) / delta;\n    }\n    h = Math.min(h * 60, 360);\n    if (h < 0) {\n        h += 360;\n    }\n    const l = (min + max) / 2;\n    if (max === min) {\n        s = 0;\n    } else if (l <= 0.5) {\n        s = delta / (max + min);\n    } else {\n        s = delta / (2 - max - min);\n    }\n    return [\n        h,\n        s * 100,\n        l * 100\n    ];\n};\nconvert.rgb.hsv = function(rgb) {\n    let rdif;\n    let gdif;\n    let bdif;\n    let h;\n    let s;\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n    const v = Math.max(r, g, b);\n    const diff = v - Math.min(r, g, b);\n    const diffc = function(c) {\n        return (v - c) / 6 / diff + 1 / 2;\n    };\n    if (diff === 0) {\n        h = 0;\n        s = 0;\n    } else {\n        s = diff / v;\n        rdif = diffc(r);\n        gdif = diffc(g);\n        bdif = diffc(b);\n        if (r === v) {\n            h = bdif - gdif;\n        } else if (g === v) {\n            h = 1 / 3 + rdif - bdif;\n        } else if (b === v) {\n            h = 2 / 3 + gdif - rdif;\n        }\n        if (h < 0) {\n            h += 1;\n        } else if (h > 1) {\n            h -= 1;\n        }\n    }\n    return [\n        h * 360,\n        s * 100,\n        v * 100\n    ];\n};\nconvert.rgb.hwb = function(rgb) {\n    const r = rgb[0];\n    const g = rgb[1];\n    let b = rgb[2];\n    const h = convert.rgb.hsl(rgb)[0];\n    const w = 1 / 255 * Math.min(r, Math.min(g, b));\n    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n    return [\n        h,\n        w * 100,\n        b * 100\n    ];\n};\nconvert.rgb.cmyk = function(rgb) {\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n    const k = Math.min(1 - r, 1 - g, 1 - b);\n    const c = (1 - r - k) / (1 - k) || 0;\n    const m = (1 - g - k) / (1 - k) || 0;\n    const y = (1 - b - k) / (1 - k) || 0;\n    return [\n        c * 100,\n        m * 100,\n        y * 100,\n        k * 100\n    ];\n};\nfunction comparativeDistance(x, y) {\n    /*\n\t\tSee https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n\t*/ return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;\n}\nconvert.rgb.keyword = function(rgb) {\n    const reversed = reverseKeywords[rgb];\n    if (reversed) {\n        return reversed;\n    }\n    let currentClosestDistance = Infinity;\n    let currentClosestKeyword;\n    for (const keyword of Object.keys(cssKeywords)){\n        const value = cssKeywords[keyword];\n        // Compute comparative distance\n        const distance = comparativeDistance(rgb, value);\n        // Check if its less, if so set as closest\n        if (distance < currentClosestDistance) {\n            currentClosestDistance = distance;\n            currentClosestKeyword = keyword;\n        }\n    }\n    return currentClosestKeyword;\n};\nconvert.keyword.rgb = function(keyword) {\n    return cssKeywords[keyword];\n};\nconvert.rgb.xyz = function(rgb) {\n    let r = rgb[0] / 255;\n    let g = rgb[1] / 255;\n    let b = rgb[2] / 255;\n    // Assume sRGB\n    r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;\n    g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;\n    b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;\n    const x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n    const y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n    const z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n    return [\n        x * 100,\n        y * 100,\n        z * 100\n    ];\n};\nconvert.rgb.lab = function(rgb) {\n    const xyz = convert.rgb.xyz(rgb);\n    let x = xyz[0];\n    let y = xyz[1];\n    let z = xyz[2];\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;\n    const l = 116 * y - 16;\n    const a = 500 * (x - y);\n    const b = 200 * (y - z);\n    return [\n        l,\n        a,\n        b\n    ];\n};\nconvert.hsl.rgb = function(hsl) {\n    const h = hsl[0] / 360;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n    let t2;\n    let t3;\n    let val;\n    if (s === 0) {\n        val = l * 255;\n        return [\n            val,\n            val,\n            val\n        ];\n    }\n    if (l < 0.5) {\n        t2 = l * (1 + s);\n    } else {\n        t2 = l + s - l * s;\n    }\n    const t1 = 2 * l - t2;\n    const rgb = [\n        0,\n        0,\n        0\n    ];\n    for(let i = 0; i < 3; i++){\n        t3 = h + 1 / 3 * -(i - 1);\n        if (t3 < 0) {\n            t3++;\n        }\n        if (t3 > 1) {\n            t3--;\n        }\n        if (6 * t3 < 1) {\n            val = t1 + (t2 - t1) * 6 * t3;\n        } else if (2 * t3 < 1) {\n            val = t2;\n        } else if (3 * t3 < 2) {\n            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n        } else {\n            val = t1;\n        }\n        rgb[i] = val * 255;\n    }\n    return rgb;\n};\nconvert.hsl.hsv = function(hsl) {\n    const h = hsl[0];\n    let s = hsl[1] / 100;\n    let l = hsl[2] / 100;\n    let smin = s;\n    const lmin = Math.max(l, 0.01);\n    l *= 2;\n    s *= l <= 1 ? l : 2 - l;\n    smin *= lmin <= 1 ? lmin : 2 - lmin;\n    const v = (l + s) / 2;\n    const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);\n    return [\n        h,\n        sv * 100,\n        v * 100\n    ];\n};\nconvert.hsv.rgb = function(hsv) {\n    const h = hsv[0] / 60;\n    const s = hsv[1] / 100;\n    let v = hsv[2] / 100;\n    const hi = Math.floor(h) % 6;\n    const f = h - Math.floor(h);\n    const p = 255 * v * (1 - s);\n    const q = 255 * v * (1 - s * f);\n    const t = 255 * v * (1 - s * (1 - f));\n    v *= 255;\n    switch(hi){\n        case 0:\n            return [\n                v,\n                t,\n                p\n            ];\n        case 1:\n            return [\n                q,\n                v,\n                p\n            ];\n        case 2:\n            return [\n                p,\n                v,\n                t\n            ];\n        case 3:\n            return [\n                p,\n                q,\n                v\n            ];\n        case 4:\n            return [\n                t,\n                p,\n                v\n            ];\n        case 5:\n            return [\n                v,\n                p,\n                q\n            ];\n    }\n};\nconvert.hsv.hsl = function(hsv) {\n    const h = hsv[0];\n    const s = hsv[1] / 100;\n    const v = hsv[2] / 100;\n    const vmin = Math.max(v, 0.01);\n    let sl;\n    let l;\n    l = (2 - s) * v;\n    const lmin = (2 - s) * vmin;\n    sl = s * vmin;\n    sl /= lmin <= 1 ? lmin : 2 - lmin;\n    sl = sl || 0;\n    l /= 2;\n    return [\n        h,\n        sl * 100,\n        l * 100\n    ];\n};\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function(hwb) {\n    const h = hwb[0] / 360;\n    let wh = hwb[1] / 100;\n    let bl = hwb[2] / 100;\n    const ratio = wh + bl;\n    let f;\n    // Wh + bl cant be > 1\n    if (ratio > 1) {\n        wh /= ratio;\n        bl /= ratio;\n    }\n    const i = Math.floor(6 * h);\n    const v = 1 - bl;\n    f = 6 * h - i;\n    if ((i & 0x01) !== 0) {\n        f = 1 - f;\n    }\n    const n = wh + f * (v - wh); // Linear interpolation\n    let r;\n    let g;\n    let b;\n    /* eslint-disable max-statements-per-line,no-multi-spaces */ switch(i){\n        default:\n        case 6:\n        case 0:\n            r = v;\n            g = n;\n            b = wh;\n            break;\n        case 1:\n            r = n;\n            g = v;\n            b = wh;\n            break;\n        case 2:\n            r = wh;\n            g = v;\n            b = n;\n            break;\n        case 3:\n            r = wh;\n            g = n;\n            b = v;\n            break;\n        case 4:\n            r = n;\n            g = wh;\n            b = v;\n            break;\n        case 5:\n            r = v;\n            g = wh;\n            b = n;\n            break;\n    }\n    /* eslint-enable max-statements-per-line,no-multi-spaces */ return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\nconvert.cmyk.rgb = function(cmyk) {\n    const c = cmyk[0] / 100;\n    const m = cmyk[1] / 100;\n    const y = cmyk[2] / 100;\n    const k = cmyk[3] / 100;\n    const r = 1 - Math.min(1, c * (1 - k) + k);\n    const g = 1 - Math.min(1, m * (1 - k) + k);\n    const b = 1 - Math.min(1, y * (1 - k) + k);\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\nconvert.xyz.rgb = function(xyz) {\n    const x = xyz[0] / 100;\n    const y = xyz[1] / 100;\n    const z = xyz[2] / 100;\n    let r;\n    let g;\n    let b;\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570;\n    // Assume sRGB\n    r = r > 0.0031308 ? 1.055 * r ** (1.0 / 2.4) - 0.055 : r * 12.92;\n    g = g > 0.0031308 ? 1.055 * g ** (1.0 / 2.4) - 0.055 : g * 12.92;\n    b = b > 0.0031308 ? 1.055 * b ** (1.0 / 2.4) - 0.055 : b * 12.92;\n    r = Math.min(Math.max(0, r), 1);\n    g = Math.min(Math.max(0, g), 1);\n    b = Math.min(Math.max(0, b), 1);\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\nconvert.xyz.lab = function(xyz) {\n    let x = xyz[0];\n    let y = xyz[1];\n    let z = xyz[2];\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? y ** (1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;\n    const l = 116 * y - 16;\n    const a = 500 * (x - y);\n    const b = 200 * (y - z);\n    return [\n        l,\n        a,\n        b\n    ];\n};\nconvert.lab.xyz = function(lab) {\n    const l = lab[0];\n    const a = lab[1];\n    const b = lab[2];\n    let x;\n    let y;\n    let z;\n    y = (l + 16) / 116;\n    x = a / 500 + y;\n    z = y - b / 200;\n    const y2 = y ** 3;\n    const x2 = x ** 3;\n    const z2 = z ** 3;\n    y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n    x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n    z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n    x *= 95.047;\n    y *= 100;\n    z *= 108.883;\n    return [\n        x,\n        y,\n        z\n    ];\n};\nconvert.lab.lch = function(lab) {\n    const l = lab[0];\n    const a = lab[1];\n    const b = lab[2];\n    let h;\n    const hr = Math.atan2(b, a);\n    h = hr * 360 / 2 / Math.PI;\n    if (h < 0) {\n        h += 360;\n    }\n    const c = Math.sqrt(a * a + b * b);\n    return [\n        l,\n        c,\n        h\n    ];\n};\nconvert.lch.lab = function(lch) {\n    const l = lch[0];\n    const c = lch[1];\n    const h = lch[2];\n    const hr = h / 360 * 2 * Math.PI;\n    const a = c * Math.cos(hr);\n    const b = c * Math.sin(hr);\n    return [\n        l,\n        a,\n        b\n    ];\n};\nconvert.rgb.ansi16 = function(args, saturation = null) {\n    const [r, g, b] = args;\n    let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization\n    value = Math.round(value / 50);\n    if (value === 0) {\n        return 30;\n    }\n    let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));\n    if (value === 2) {\n        ansi += 60;\n    }\n    return ansi;\n};\nconvert.hsv.ansi16 = function(args) {\n    // Optimization here; we already know the value and don't need to get\n    // it converted for us.\n    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\nconvert.rgb.ansi256 = function(args) {\n    const r = args[0];\n    const g = args[1];\n    const b = args[2];\n    // We use the extended greyscale palette here, with the exception of\n    // black and white. normal palette only has 4 greyscale shades.\n    if (r === g && g === b) {\n        if (r < 8) {\n            return 16;\n        }\n        if (r > 248) {\n            return 231;\n        }\n        return Math.round((r - 8) / 247 * 24) + 232;\n    }\n    const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);\n    return ansi;\n};\nconvert.ansi16.rgb = function(args) {\n    let color = args % 10;\n    // Handle greyscale\n    if (color === 0 || color === 7) {\n        if (args > 50) {\n            color += 3.5;\n        }\n        color = color / 10.5 * 255;\n        return [\n            color,\n            color,\n            color\n        ];\n    }\n    const mult = (~~(args > 50) + 1) * 0.5;\n    const r = (color & 1) * mult * 255;\n    const g = (color >> 1 & 1) * mult * 255;\n    const b = (color >> 2 & 1) * mult * 255;\n    return [\n        r,\n        g,\n        b\n    ];\n};\nconvert.ansi256.rgb = function(args) {\n    // Handle greyscale\n    if (args >= 232) {\n        const c = (args - 232) * 10 + 8;\n        return [\n            c,\n            c,\n            c\n        ];\n    }\n    args -= 16;\n    let rem;\n    const r = Math.floor(args / 36) / 5 * 255;\n    const g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n    const b = rem % 6 / 5 * 255;\n    return [\n        r,\n        g,\n        b\n    ];\n};\nconvert.rgb.hex = function(args) {\n    const integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);\n    const string = integer.toString(16).toUpperCase();\n    return \"000000\".substring(string.length) + string;\n};\nconvert.hex.rgb = function(args) {\n    const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n    if (!match) {\n        return [\n            0,\n            0,\n            0\n        ];\n    }\n    let colorString = match[0];\n    if (match[0].length === 3) {\n        colorString = colorString.split(\"\").map((char)=>{\n            return char + char;\n        }).join(\"\");\n    }\n    const integer = parseInt(colorString, 16);\n    const r = integer >> 16 & 0xFF;\n    const g = integer >> 8 & 0xFF;\n    const b = integer & 0xFF;\n    return [\n        r,\n        g,\n        b\n    ];\n};\nconvert.rgb.hcg = function(rgb) {\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n    const max = Math.max(Math.max(r, g), b);\n    const min = Math.min(Math.min(r, g), b);\n    const chroma = max - min;\n    let grayscale;\n    let hue;\n    if (chroma < 1) {\n        grayscale = min / (1 - chroma);\n    } else {\n        grayscale = 0;\n    }\n    if (chroma <= 0) {\n        hue = 0;\n    } else if (max === r) {\n        hue = (g - b) / chroma % 6;\n    } else if (max === g) {\n        hue = 2 + (b - r) / chroma;\n    } else {\n        hue = 4 + (r - g) / chroma;\n    }\n    hue /= 6;\n    hue %= 1;\n    return [\n        hue * 360,\n        chroma * 100,\n        grayscale * 100\n    ];\n};\nconvert.hsl.hcg = function(hsl) {\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n    const c = l < 0.5 ? 2.0 * s * l : 2.0 * s * (1.0 - l);\n    let f = 0;\n    if (c < 1.0) {\n        f = (l - 0.5 * c) / (1.0 - c);\n    }\n    return [\n        hsl[0],\n        c * 100,\n        f * 100\n    ];\n};\nconvert.hsv.hcg = function(hsv) {\n    const s = hsv[1] / 100;\n    const v = hsv[2] / 100;\n    const c = s * v;\n    let f = 0;\n    if (c < 1.0) {\n        f = (v - c) / (1 - c);\n    }\n    return [\n        hsv[0],\n        c * 100,\n        f * 100\n    ];\n};\nconvert.hcg.rgb = function(hcg) {\n    const h = hcg[0] / 360;\n    const c = hcg[1] / 100;\n    const g = hcg[2] / 100;\n    if (c === 0.0) {\n        return [\n            g * 255,\n            g * 255,\n            g * 255\n        ];\n    }\n    const pure = [\n        0,\n        0,\n        0\n    ];\n    const hi = h % 1 * 6;\n    const v = hi % 1;\n    const w = 1 - v;\n    let mg = 0;\n    /* eslint-disable max-statements-per-line */ switch(Math.floor(hi)){\n        case 0:\n            pure[0] = 1;\n            pure[1] = v;\n            pure[2] = 0;\n            break;\n        case 1:\n            pure[0] = w;\n            pure[1] = 1;\n            pure[2] = 0;\n            break;\n        case 2:\n            pure[0] = 0;\n            pure[1] = 1;\n            pure[2] = v;\n            break;\n        case 3:\n            pure[0] = 0;\n            pure[1] = w;\n            pure[2] = 1;\n            break;\n        case 4:\n            pure[0] = v;\n            pure[1] = 0;\n            pure[2] = 1;\n            break;\n        default:\n            pure[0] = 1;\n            pure[1] = 0;\n            pure[2] = w;\n    }\n    /* eslint-enable max-statements-per-line */ mg = (1.0 - c) * g;\n    return [\n        (c * pure[0] + mg) * 255,\n        (c * pure[1] + mg) * 255,\n        (c * pure[2] + mg) * 255\n    ];\n};\nconvert.hcg.hsv = function(hcg) {\n    const c = hcg[1] / 100;\n    const g = hcg[2] / 100;\n    const v = c + g * (1.0 - c);\n    let f = 0;\n    if (v > 0.0) {\n        f = c / v;\n    }\n    return [\n        hcg[0],\n        f * 100,\n        v * 100\n    ];\n};\nconvert.hcg.hsl = function(hcg) {\n    const c = hcg[1] / 100;\n    const g = hcg[2] / 100;\n    const l = g * (1.0 - c) + 0.5 * c;\n    let s = 0;\n    if (l > 0.0 && l < 0.5) {\n        s = c / (2 * l);\n    } else if (l >= 0.5 && l < 1.0) {\n        s = c / (2 * (1 - l));\n    }\n    return [\n        hcg[0],\n        s * 100,\n        l * 100\n    ];\n};\nconvert.hcg.hwb = function(hcg) {\n    const c = hcg[1] / 100;\n    const g = hcg[2] / 100;\n    const v = c + g * (1.0 - c);\n    return [\n        hcg[0],\n        (v - c) * 100,\n        (1 - v) * 100\n    ];\n};\nconvert.hwb.hcg = function(hwb) {\n    const w = hwb[1] / 100;\n    const b = hwb[2] / 100;\n    const v = 1 - b;\n    const c = v - w;\n    let g = 0;\n    if (c < 1) {\n        g = (v - c) / (1 - c);\n    }\n    return [\n        hwb[0],\n        c * 100,\n        g * 100\n    ];\n};\nconvert.apple.rgb = function(apple) {\n    return [\n        apple[0] / 65535 * 255,\n        apple[1] / 65535 * 255,\n        apple[2] / 65535 * 255\n    ];\n};\nconvert.rgb.apple = function(rgb) {\n    return [\n        rgb[0] / 255 * 65535,\n        rgb[1] / 255 * 65535,\n        rgb[2] / 255 * 65535\n    ];\n};\nconvert.gray.rgb = function(args) {\n    return [\n        args[0] / 100 * 255,\n        args[0] / 100 * 255,\n        args[0] / 100 * 255\n    ];\n};\nconvert.gray.hsl = function(args) {\n    return [\n        0,\n        0,\n        args[0]\n    ];\n};\nconvert.gray.hsv = convert.gray.hsl;\nconvert.gray.hwb = function(gray) {\n    return [\n        0,\n        100,\n        gray[0]\n    ];\n};\nconvert.gray.cmyk = function(gray) {\n    return [\n        0,\n        0,\n        0,\n        gray[0]\n    ];\n};\nconvert.gray.lab = function(gray) {\n    return [\n        gray[0],\n        0,\n        0\n    ];\n};\nconvert.gray.hex = function(gray) {\n    const val = Math.round(gray[0] / 100 * 255) & 0xFF;\n    const integer = (val << 16) + (val << 8) + val;\n    const string = integer.toString(16).toUpperCase();\n    return \"000000\".substring(string.length) + string;\n};\nconvert.rgb.gray = function(rgb) {\n    const val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n    return [\n        val / 255 * 100\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color-convert/conversions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/color-convert/index.js":
/*!*********************************************!*\
  !*** ./node_modules/color-convert/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const conversions = __webpack_require__(/*! ./conversions */ \"(ssr)/./node_modules/color-convert/conversions.js\");\nconst route = __webpack_require__(/*! ./route */ \"(ssr)/./node_modules/color-convert/route.js\");\nconst convert = {};\nconst models = Object.keys(conversions);\nfunction wrapRaw(fn) {\n    const wrappedFn = function(...args) {\n        const arg0 = args[0];\n        if (arg0 === undefined || arg0 === null) {\n            return arg0;\n        }\n        if (arg0.length > 1) {\n            args = arg0;\n        }\n        return fn(args);\n    };\n    // Preserve .conversion property if there is one\n    if (\"conversion\" in fn) {\n        wrappedFn.conversion = fn.conversion;\n    }\n    return wrappedFn;\n}\nfunction wrapRounded(fn) {\n    const wrappedFn = function(...args) {\n        const arg0 = args[0];\n        if (arg0 === undefined || arg0 === null) {\n            return arg0;\n        }\n        if (arg0.length > 1) {\n            args = arg0;\n        }\n        const result = fn(args);\n        // We're assuming the result is an array here.\n        // see notice in conversions.js; don't use box types\n        // in conversion functions.\n        if (typeof result === \"object\") {\n            for(let len = result.length, i = 0; i < len; i++){\n                result[i] = Math.round(result[i]);\n            }\n        }\n        return result;\n    };\n    // Preserve .conversion property if there is one\n    if (\"conversion\" in fn) {\n        wrappedFn.conversion = fn.conversion;\n    }\n    return wrappedFn;\n}\nmodels.forEach((fromModel)=>{\n    convert[fromModel] = {};\n    Object.defineProperty(convert[fromModel], \"channels\", {\n        value: conversions[fromModel].channels\n    });\n    Object.defineProperty(convert[fromModel], \"labels\", {\n        value: conversions[fromModel].labels\n    });\n    const routes = route(fromModel);\n    const routeModels = Object.keys(routes);\n    routeModels.forEach((toModel)=>{\n        const fn = routes[toModel];\n        convert[fromModel][toModel] = wrapRounded(fn);\n        convert[fromModel][toModel].raw = wrapRaw(fn);\n    });\n});\nmodule.exports = convert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUM1QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUV0QixNQUFNRSxVQUFVLENBQUM7QUFFakIsTUFBTUMsU0FBU0MsT0FBT0MsSUFBSSxDQUFDTjtBQUUzQixTQUFTTyxRQUFRQyxFQUFFO0lBQ2xCLE1BQU1DLFlBQVksU0FBVSxHQUFHQyxJQUFJO1FBQ2xDLE1BQU1DLE9BQU9ELElBQUksQ0FBQyxFQUFFO1FBQ3BCLElBQUlDLFNBQVNDLGFBQWFELFNBQVMsTUFBTTtZQUN4QyxPQUFPQTtRQUNSO1FBRUEsSUFBSUEsS0FBS0UsTUFBTSxHQUFHLEdBQUc7WUFDcEJILE9BQU9DO1FBQ1I7UUFFQSxPQUFPSCxHQUFHRTtJQUNYO0lBRUEsZ0RBQWdEO0lBQ2hELElBQUksZ0JBQWdCRixJQUFJO1FBQ3ZCQyxVQUFVSyxVQUFVLEdBQUdOLEdBQUdNLFVBQVU7SUFDckM7SUFFQSxPQUFPTDtBQUNSO0FBRUEsU0FBU00sWUFBWVAsRUFBRTtJQUN0QixNQUFNQyxZQUFZLFNBQVUsR0FBR0MsSUFBSTtRQUNsQyxNQUFNQyxPQUFPRCxJQUFJLENBQUMsRUFBRTtRQUVwQixJQUFJQyxTQUFTQyxhQUFhRCxTQUFTLE1BQU07WUFDeEMsT0FBT0E7UUFDUjtRQUVBLElBQUlBLEtBQUtFLE1BQU0sR0FBRyxHQUFHO1lBQ3BCSCxPQUFPQztRQUNSO1FBRUEsTUFBTUssU0FBU1IsR0FBR0U7UUFFbEIsOENBQThDO1FBQzlDLG9EQUFvRDtRQUNwRCwyQkFBMkI7UUFDM0IsSUFBSSxPQUFPTSxXQUFXLFVBQVU7WUFDL0IsSUFBSyxJQUFJQyxNQUFNRCxPQUFPSCxNQUFNLEVBQUVLLElBQUksR0FBR0EsSUFBSUQsS0FBS0MsSUFBSztnQkFDbERGLE1BQU0sQ0FBQ0UsRUFBRSxHQUFHQyxLQUFLQyxLQUFLLENBQUNKLE1BQU0sQ0FBQ0UsRUFBRTtZQUNqQztRQUNEO1FBRUEsT0FBT0Y7SUFDUjtJQUVBLGdEQUFnRDtJQUNoRCxJQUFJLGdCQUFnQlIsSUFBSTtRQUN2QkMsVUFBVUssVUFBVSxHQUFHTixHQUFHTSxVQUFVO0lBQ3JDO0lBRUEsT0FBT0w7QUFDUjtBQUVBTCxPQUFPaUIsT0FBTyxDQUFDQyxDQUFBQTtJQUNkbkIsT0FBTyxDQUFDbUIsVUFBVSxHQUFHLENBQUM7SUFFdEJqQixPQUFPa0IsY0FBYyxDQUFDcEIsT0FBTyxDQUFDbUIsVUFBVSxFQUFFLFlBQVk7UUFBQ0UsT0FBT3hCLFdBQVcsQ0FBQ3NCLFVBQVUsQ0FBQ0csUUFBUTtJQUFBO0lBQzdGcEIsT0FBT2tCLGNBQWMsQ0FBQ3BCLE9BQU8sQ0FBQ21CLFVBQVUsRUFBRSxVQUFVO1FBQUNFLE9BQU94QixXQUFXLENBQUNzQixVQUFVLENBQUNJLE1BQU07SUFBQTtJQUV6RixNQUFNQyxTQUFTekIsTUFBTW9CO0lBQ3JCLE1BQU1NLGNBQWN2QixPQUFPQyxJQUFJLENBQUNxQjtJQUVoQ0MsWUFBWVAsT0FBTyxDQUFDUSxDQUFBQTtRQUNuQixNQUFNckIsS0FBS21CLE1BQU0sQ0FBQ0UsUUFBUTtRQUUxQjFCLE9BQU8sQ0FBQ21CLFVBQVUsQ0FBQ08sUUFBUSxHQUFHZCxZQUFZUDtRQUMxQ0wsT0FBTyxDQUFDbUIsVUFBVSxDQUFDTyxRQUFRLENBQUNDLEdBQUcsR0FBR3ZCLFFBQVFDO0lBQzNDO0FBQ0Q7QUFFQXVCLE9BQU9DLE9BQU8sR0FBRzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sLXBvcnRmb2xpby1hcHAvLi9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9pbmRleC5qcz83ODRhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbnZlcnNpb25zID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xuY29uc3Qgcm91dGUgPSByZXF1aXJlKCcuL3JvdXRlJyk7XG5cbmNvbnN0IGNvbnZlcnQgPSB7fTtcblxuY29uc3QgbW9kZWxzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnMpO1xuXG5mdW5jdGlvbiB3cmFwUmF3KGZuKSB7XG5cdGNvbnN0IHdyYXBwZWRGbiA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0Y29uc3QgYXJnMCA9IGFyZ3NbMF07XG5cdFx0aWYgKGFyZzAgPT09IHVuZGVmaW5lZCB8fCBhcmcwID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJnMDtcblx0XHR9XG5cblx0XHRpZiAoYXJnMC5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gYXJnMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZm4oYXJncyk7XG5cdH07XG5cblx0Ly8gUHJlc2VydmUgLmNvbnZlcnNpb24gcHJvcGVydHkgaWYgdGhlcmUgaXMgb25lXG5cdGlmICgnY29udmVyc2lvbicgaW4gZm4pIHtcblx0XHR3cmFwcGVkRm4uY29udmVyc2lvbiA9IGZuLmNvbnZlcnNpb247XG5cdH1cblxuXHRyZXR1cm4gd3JhcHBlZEZuO1xufVxuXG5mdW5jdGlvbiB3cmFwUm91bmRlZChmbikge1xuXHRjb25zdCB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdGNvbnN0IGFyZzAgPSBhcmdzWzBdO1xuXG5cdFx0aWYgKGFyZzAgPT09IHVuZGVmaW5lZCB8fCBhcmcwID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJnMDtcblx0XHR9XG5cblx0XHRpZiAoYXJnMC5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gYXJnMDtcblx0XHR9XG5cblx0XHRjb25zdCByZXN1bHQgPSBmbihhcmdzKTtcblxuXHRcdC8vIFdlJ3JlIGFzc3VtaW5nIHRoZSByZXN1bHQgaXMgYW4gYXJyYXkgaGVyZS5cblx0XHQvLyBzZWUgbm90aWNlIGluIGNvbnZlcnNpb25zLmpzOyBkb24ndCB1c2UgYm94IHR5cGVzXG5cdFx0Ly8gaW4gY29udmVyc2lvbiBmdW5jdGlvbnMuXG5cdFx0aWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKGxldCBsZW4gPSByZXN1bHQubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdFtpXSA9IE1hdGgucm91bmQocmVzdWx0W2ldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8vIFByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxubW9kZWxzLmZvckVhY2goZnJvbU1vZGVsID0+IHtcblx0Y29udmVydFtmcm9tTW9kZWxdID0ge307XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2NoYW5uZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmNoYW5uZWxzfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdsYWJlbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0ubGFiZWxzfSk7XG5cblx0Y29uc3Qgcm91dGVzID0gcm91dGUoZnJvbU1vZGVsKTtcblx0Y29uc3Qgcm91dGVNb2RlbHMgPSBPYmplY3Qua2V5cyhyb3V0ZXMpO1xuXG5cdHJvdXRlTW9kZWxzLmZvckVhY2godG9Nb2RlbCA9PiB7XG5cdFx0Y29uc3QgZm4gPSByb3V0ZXNbdG9Nb2RlbF07XG5cblx0XHRjb252ZXJ0W2Zyb21Nb2RlbF1bdG9Nb2RlbF0gPSB3cmFwUm91bmRlZChmbik7XG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdLnJhdyA9IHdyYXBSYXcoZm4pO1xuXHR9KTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnQ7XG4iXSwibmFtZXMiOlsiY29udmVyc2lvbnMiLCJyZXF1aXJlIiwicm91dGUiLCJjb252ZXJ0IiwibW9kZWxzIiwiT2JqZWN0Iiwia2V5cyIsIndyYXBSYXciLCJmbiIsIndyYXBwZWRGbiIsImFyZ3MiLCJhcmcwIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwiY29udmVyc2lvbiIsIndyYXBSb3VuZGVkIiwicmVzdWx0IiwibGVuIiwiaSIsIk1hdGgiLCJyb3VuZCIsImZvckVhY2giLCJmcm9tTW9kZWwiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiY2hhbm5lbHMiLCJsYWJlbHMiLCJyb3V0ZXMiLCJyb3V0ZU1vZGVscyIsInRvTW9kZWwiLCJyYXciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color-convert/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/color-convert/route.js":
/*!*********************************************!*\
  !*** ./node_modules/color-convert/route.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const conversions = __webpack_require__(/*! ./conversions */ \"(ssr)/./node_modules/color-convert/conversions.js\");\n/*\n\tThis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/ function buildGraph() {\n    const graph = {};\n    // https://jsperf.com/object-keys-vs-for-in-with-closure/3\n    const models = Object.keys(conversions);\n    for(let len = models.length, i = 0; i < len; i++){\n        graph[models[i]] = {\n            // http://jsperf.com/1-vs-infinity\n            // micro-opt, but this is simple.\n            distance: -1,\n            parent: null\n        };\n    }\n    return graph;\n}\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n    const graph = buildGraph();\n    const queue = [\n        fromModel\n    ]; // Unshift -> queue -> pop\n    graph[fromModel].distance = 0;\n    while(queue.length){\n        const current = queue.pop();\n        const adjacents = Object.keys(conversions[current]);\n        for(let len = adjacents.length, i = 0; i < len; i++){\n            const adjacent = adjacents[i];\n            const node = graph[adjacent];\n            if (node.distance === -1) {\n                node.distance = graph[current].distance + 1;\n                node.parent = current;\n                queue.unshift(adjacent);\n            }\n        }\n    }\n    return graph;\n}\nfunction link(from, to) {\n    return function(args) {\n        return to(from(args));\n    };\n}\nfunction wrapConversion(toModel, graph) {\n    const path = [\n        graph[toModel].parent,\n        toModel\n    ];\n    let fn = conversions[graph[toModel].parent][toModel];\n    let cur = graph[toModel].parent;\n    while(graph[cur].parent){\n        path.unshift(graph[cur].parent);\n        fn = link(conversions[graph[cur].parent][cur], fn);\n        cur = graph[cur].parent;\n    }\n    fn.conversion = path;\n    return fn;\n}\nmodule.exports = function(fromModel) {\n    const graph = deriveBFS(fromModel);\n    const conversion = {};\n    const models = Object.keys(graph);\n    for(let len = models.length, i = 0; i < len; i++){\n        const toModel = models[i];\n        const node = graph[toModel];\n        if (node.parent === null) {\n            continue;\n        }\n        conversion[toModel] = wrapConversion(toModel, graph);\n    }\n    return conversion;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9yb3V0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUU1Qjs7Ozs7Ozs7O0FBU0EsR0FFQSxTQUFTQztJQUNSLE1BQU1DLFFBQVEsQ0FBQztJQUNmLDBEQUEwRDtJQUMxRCxNQUFNQyxTQUFTQyxPQUFPQyxJQUFJLENBQUNOO0lBRTNCLElBQUssSUFBSU8sTUFBTUgsT0FBT0ksTUFBTSxFQUFFQyxJQUFJLEdBQUdBLElBQUlGLEtBQUtFLElBQUs7UUFDbEROLEtBQUssQ0FBQ0MsTUFBTSxDQUFDSyxFQUFFLENBQUMsR0FBRztZQUNsQixrQ0FBa0M7WUFDbEMsaUNBQWlDO1lBQ2pDQyxVQUFVLENBQUM7WUFDWEMsUUFBUTtRQUNUO0lBQ0Q7SUFFQSxPQUFPUjtBQUNSO0FBRUEscURBQXFEO0FBQ3JELFNBQVNTLFVBQVVDLFNBQVM7SUFDM0IsTUFBTVYsUUFBUUQ7SUFDZCxNQUFNWSxRQUFRO1FBQUNEO0tBQVUsRUFBRSwwQkFBMEI7SUFFckRWLEtBQUssQ0FBQ1UsVUFBVSxDQUFDSCxRQUFRLEdBQUc7SUFFNUIsTUFBT0ksTUFBTU4sTUFBTSxDQUFFO1FBQ3BCLE1BQU1PLFVBQVVELE1BQU1FLEdBQUc7UUFDekIsTUFBTUMsWUFBWVosT0FBT0MsSUFBSSxDQUFDTixXQUFXLENBQUNlLFFBQVE7UUFFbEQsSUFBSyxJQUFJUixNQUFNVSxVQUFVVCxNQUFNLEVBQUVDLElBQUksR0FBR0EsSUFBSUYsS0FBS0UsSUFBSztZQUNyRCxNQUFNUyxXQUFXRCxTQUFTLENBQUNSLEVBQUU7WUFDN0IsTUFBTVUsT0FBT2hCLEtBQUssQ0FBQ2UsU0FBUztZQUU1QixJQUFJQyxLQUFLVCxRQUFRLEtBQUssQ0FBQyxHQUFHO2dCQUN6QlMsS0FBS1QsUUFBUSxHQUFHUCxLQUFLLENBQUNZLFFBQVEsQ0FBQ0wsUUFBUSxHQUFHO2dCQUMxQ1MsS0FBS1IsTUFBTSxHQUFHSTtnQkFDZEQsTUFBTU0sT0FBTyxDQUFDRjtZQUNmO1FBQ0Q7SUFDRDtJQUVBLE9BQU9mO0FBQ1I7QUFFQSxTQUFTa0IsS0FBS0MsSUFBSSxFQUFFQyxFQUFFO0lBQ3JCLE9BQU8sU0FBVUMsSUFBSTtRQUNwQixPQUFPRCxHQUFHRCxLQUFLRTtJQUNoQjtBQUNEO0FBRUEsU0FBU0MsZUFBZUMsT0FBTyxFQUFFdkIsS0FBSztJQUNyQyxNQUFNd0IsT0FBTztRQUFDeEIsS0FBSyxDQUFDdUIsUUFBUSxDQUFDZixNQUFNO1FBQUVlO0tBQVE7SUFDN0MsSUFBSUUsS0FBSzVCLFdBQVcsQ0FBQ0csS0FBSyxDQUFDdUIsUUFBUSxDQUFDZixNQUFNLENBQUMsQ0FBQ2UsUUFBUTtJQUVwRCxJQUFJRyxNQUFNMUIsS0FBSyxDQUFDdUIsUUFBUSxDQUFDZixNQUFNO0lBQy9CLE1BQU9SLEtBQUssQ0FBQzBCLElBQUksQ0FBQ2xCLE1BQU0sQ0FBRTtRQUN6QmdCLEtBQUtQLE9BQU8sQ0FBQ2pCLEtBQUssQ0FBQzBCLElBQUksQ0FBQ2xCLE1BQU07UUFDOUJpQixLQUFLUCxLQUFLckIsV0FBVyxDQUFDRyxLQUFLLENBQUMwQixJQUFJLENBQUNsQixNQUFNLENBQUMsQ0FBQ2tCLElBQUksRUFBRUQ7UUFDL0NDLE1BQU0xQixLQUFLLENBQUMwQixJQUFJLENBQUNsQixNQUFNO0lBQ3hCO0lBRUFpQixHQUFHRSxVQUFVLEdBQUdIO0lBQ2hCLE9BQU9DO0FBQ1I7QUFFQUcsT0FBT0MsT0FBTyxHQUFHLFNBQVVuQixTQUFTO0lBQ25DLE1BQU1WLFFBQVFTLFVBQVVDO0lBQ3hCLE1BQU1pQixhQUFhLENBQUM7SUFFcEIsTUFBTTFCLFNBQVNDLE9BQU9DLElBQUksQ0FBQ0g7SUFDM0IsSUFBSyxJQUFJSSxNQUFNSCxPQUFPSSxNQUFNLEVBQUVDLElBQUksR0FBR0EsSUFBSUYsS0FBS0UsSUFBSztRQUNsRCxNQUFNaUIsVUFBVXRCLE1BQU0sQ0FBQ0ssRUFBRTtRQUN6QixNQUFNVSxPQUFPaEIsS0FBSyxDQUFDdUIsUUFBUTtRQUUzQixJQUFJUCxLQUFLUixNQUFNLEtBQUssTUFBTTtZQUV6QjtRQUNEO1FBRUFtQixVQUFVLENBQUNKLFFBQVEsR0FBR0QsZUFBZUMsU0FBU3ZCO0lBQy9DO0lBRUEsT0FBTzJCO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2wtcG9ydGZvbGlvLWFwcC8uL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L3JvdXRlLmpzPzU0YWQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29udmVyc2lvbnMgPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG5cbi8qXG5cdFRoaXMgZnVuY3Rpb24gcm91dGVzIGEgbW9kZWwgdG8gYWxsIG90aGVyIG1vZGVscy5cblxuXHRhbGwgZnVuY3Rpb25zIHRoYXQgYXJlIHJvdXRlZCBoYXZlIGEgcHJvcGVydHkgYC5jb252ZXJzaW9uYCBhdHRhY2hlZFxuXHR0byB0aGUgcmV0dXJuZWQgc3ludGhldGljIGZ1bmN0aW9uLiBUaGlzIHByb3BlcnR5IGlzIGFuIGFycmF5XG5cdG9mIHN0cmluZ3MsIGVhY2ggd2l0aCB0aGUgc3RlcHMgaW4gYmV0d2VlbiB0aGUgJ2Zyb20nIGFuZCAndG8nXG5cdGNvbG9yIG1vZGVscyAoaW5jbHVzaXZlKS5cblxuXHRjb252ZXJzaW9ucyB0aGF0IGFyZSBub3QgcG9zc2libGUgc2ltcGx5IGFyZSBub3QgaW5jbHVkZWQuXG4qL1xuXG5mdW5jdGlvbiBidWlsZEdyYXBoKCkge1xuXHRjb25zdCBncmFwaCA9IHt9O1xuXHQvLyBodHRwczovL2pzcGVyZi5jb20vb2JqZWN0LWtleXMtdnMtZm9yLWluLXdpdGgtY2xvc3VyZS8zXG5cdGNvbnN0IG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuXHRmb3IgKGxldCBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0Z3JhcGhbbW9kZWxzW2ldXSA9IHtcblx0XHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tLzEtdnMtaW5maW5pdHlcblx0XHRcdC8vIG1pY3JvLW9wdCwgYnV0IHRoaXMgaXMgc2ltcGxlLlxuXHRcdFx0ZGlzdGFuY2U6IC0xLFxuXHRcdFx0cGFyZW50OiBudWxsXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnJlYWR0aC1maXJzdF9zZWFyY2hcbmZ1bmN0aW9uIGRlcml2ZUJGUyhmcm9tTW9kZWwpIHtcblx0Y29uc3QgZ3JhcGggPSBidWlsZEdyYXBoKCk7XG5cdGNvbnN0IHF1ZXVlID0gW2Zyb21Nb2RlbF07IC8vIFVuc2hpZnQgLT4gcXVldWUgLT4gcG9wXG5cblx0Z3JhcGhbZnJvbU1vZGVsXS5kaXN0YW5jZSA9IDA7XG5cblx0d2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSBxdWV1ZS5wb3AoKTtcblx0XHRjb25zdCBhZGphY2VudHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9uc1tjdXJyZW50XSk7XG5cblx0XHRmb3IgKGxldCBsZW4gPSBhZGphY2VudHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRjb25zdCBhZGphY2VudCA9IGFkamFjZW50c1tpXTtcblx0XHRcdGNvbnN0IG5vZGUgPSBncmFwaFthZGphY2VudF07XG5cblx0XHRcdGlmIChub2RlLmRpc3RhbmNlID09PSAtMSkge1xuXHRcdFx0XHRub2RlLmRpc3RhbmNlID0gZ3JhcGhbY3VycmVudF0uZGlzdGFuY2UgKyAxO1xuXHRcdFx0XHRub2RlLnBhcmVudCA9IGN1cnJlbnQ7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoYWRqYWNlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuZnVuY3Rpb24gbGluayhmcm9tLCB0bykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRyZXR1cm4gdG8oZnJvbShhcmdzKSk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKSB7XG5cdGNvbnN0IHBhdGggPSBbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50LCB0b01vZGVsXTtcblx0bGV0IGZuID0gY29udmVyc2lvbnNbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50XVt0b01vZGVsXTtcblxuXHRsZXQgY3VyID0gZ3JhcGhbdG9Nb2RlbF0ucGFyZW50O1xuXHR3aGlsZSAoZ3JhcGhbY3VyXS5wYXJlbnQpIHtcblx0XHRwYXRoLnVuc2hpZnQoZ3JhcGhbY3VyXS5wYXJlbnQpO1xuXHRcdGZuID0gbGluayhjb252ZXJzaW9uc1tncmFwaFtjdXJdLnBhcmVudF1bY3VyXSwgZm4pO1xuXHRcdGN1ciA9IGdyYXBoW2N1cl0ucGFyZW50O1xuXHR9XG5cblx0Zm4uY29udmVyc2lvbiA9IHBhdGg7XG5cdHJldHVybiBmbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZnJvbU1vZGVsKSB7XG5cdGNvbnN0IGdyYXBoID0gZGVyaXZlQkZTKGZyb21Nb2RlbCk7XG5cdGNvbnN0IGNvbnZlcnNpb24gPSB7fTtcblxuXHRjb25zdCBtb2RlbHMgPSBPYmplY3Qua2V5cyhncmFwaCk7XG5cdGZvciAobGV0IGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRjb25zdCB0b01vZGVsID0gbW9kZWxzW2ldO1xuXHRcdGNvbnN0IG5vZGUgPSBncmFwaFt0b01vZGVsXTtcblxuXHRcdGlmIChub2RlLnBhcmVudCA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gTm8gcG9zc2libGUgY29udmVyc2lvbiwgb3IgdGhpcyBub2RlIGlzIHRoZSBzb3VyY2UgbW9kZWwuXG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb252ZXJzaW9uW3RvTW9kZWxdID0gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpO1xuXHR9XG5cblx0cmV0dXJuIGNvbnZlcnNpb247XG59O1xuXG4iXSwibmFtZXMiOlsiY29udmVyc2lvbnMiLCJyZXF1aXJlIiwiYnVpbGRHcmFwaCIsImdyYXBoIiwibW9kZWxzIiwiT2JqZWN0Iiwia2V5cyIsImxlbiIsImxlbmd0aCIsImkiLCJkaXN0YW5jZSIsInBhcmVudCIsImRlcml2ZUJGUyIsImZyb21Nb2RlbCIsInF1ZXVlIiwiY3VycmVudCIsInBvcCIsImFkamFjZW50cyIsImFkamFjZW50Iiwibm9kZSIsInVuc2hpZnQiLCJsaW5rIiwiZnJvbSIsInRvIiwiYXJncyIsIndyYXBDb252ZXJzaW9uIiwidG9Nb2RlbCIsInBhdGgiLCJmbiIsImN1ciIsImNvbnZlcnNpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color-convert/route.js\n");

/***/ })

};
;